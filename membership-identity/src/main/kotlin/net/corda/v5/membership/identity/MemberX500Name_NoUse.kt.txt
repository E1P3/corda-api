package net.corda.v5.membership.identity

// NO USE as all those
// import sun.security.util.DerOutputStream
// import sun.security.util.DerValue
// import sun.security.util.ObjectIdentifier
// import sun.security.x509.AVA
// import sun.security.x509.RDN
// import sun.security.x509.X500Name
// are not exportable from java.base

import net.corda.v5.base.annotations.CordaSerializable
import net.corda.v5.membership.identity.internal.LegalNameValidator
import sun.security.util.DerOutputStream
import sun.security.util.DerValue
import sun.security.util.ObjectIdentifier
import sun.security.x509.AVA
import sun.security.x509.RDN
import sun.security.x509.X500Name
import java.util.Locale
import javax.security.auth.x500.X500Principal

/**
 * X.500 distinguished name data type customised to how Corda uses names. This restricts the attributes to those Corda
 * supports, and requires that organisation, locality and country attributes are specified. See also RFC 4519 for
 * the underlying attribute type definitions.
 *
 * This is the base class for CordaX500Name. Should be used for modules which are below application.
 *
 * @property commonName optional name by the which the entity is usually known. Used only for services (for
 * organisations, the [organisation] property is the name). Corresponds to the "CN" attribute type.
 * @property organisationUnit optional name of a unit within the [organisation]. Corresponds to the "OU" attribute type.
 * @property organisation name of the organisation. Corresponds to the "O" attribute type.
 * @property locality locality of the organisation, typically nearest major city. For distributed services this would be
 * where one of the organisations is based. Corresponds to the "L" attribute type.
 * @property state the full name of the state or province the organisation is based in. Corresponds to the "ST"
 * attribute type.
 * @property country country the organisation is in, as an ISO 3166-1 2-letter country code. Corresponds to the "C"
 * attribute type.
*/
@Suppress("LongParameterList")
@CordaSerializable
open class MemberX500Name_NoUse(
    val commonName: String?,
    val organisationUnit: String?,
    val organisation: String,
    val locality: String,
    val state: String?,
    val country: String
) {
    constructor(commonName: String, organisation: String, locality: String, country: String) :
            this(
                commonName = commonName,
                organisationUnit = null,
                organisation = organisation,
                locality = locality,
                state = null,
                country = country
            )

    /**
     * @param organisation name of the organisation.
     * @param locality locality of the organisation, typically nearest major city.
     * @param country country the organisation is in, as an ISO 3166-1 2-letter country code.
     */
    constructor(organisation: String, locality: String, country: String) : this(null, null, organisation, locality, null, country)

    init {
        // Legal name checks.
        LegalNameValidator.validateOrganization(organisation)

        require(country in countryCodes) { "Invalid country code $country" }

        require(organisation.length < MAX_LENGTH_ORGANISATION) {
            "Organisation attribute (O) must contain less then $MAX_LENGTH_ORGANISATION characters."
        }
        require(locality.length < MAX_LENGTH_LOCALITY) { "Locality attribute (L) must contain less then $MAX_LENGTH_LOCALITY characters." }

        state?.let { require(it.length < MAX_LENGTH_STATE) { "State attribute (ST) must contain less then $MAX_LENGTH_STATE characters." } }
        organisationUnit?.let {
            require(it.length < MAX_LENGTH_ORGANISATION_UNIT) {
                "Organisation Unit attribute (OU) must contain less then $MAX_LENGTH_ORGANISATION_UNIT characters."
            }
        }
        commonName?.let {
            require(it.length < MAX_LENGTH_COMMON_NAME) {
                "Common Name attribute (CN) must contain less then $MAX_LENGTH_COMMON_NAME characters."
            }
        }
    }

    object ObjectIdentifiers {
        @JvmStatic
        val C = ObjectIdentifier("2.5.4.6")

        @JvmStatic
        val ST = ObjectIdentifier("2.5.4.8")

        @JvmStatic
        val L = ObjectIdentifier("2.5.4.7")

        @JvmStatic
        val O = ObjectIdentifier("2.5.4.10")

        @JvmStatic
        val OU = ObjectIdentifier("2.5.4.11")

        @JvmStatic
        val CN = ObjectIdentifier("2.5.4.3")
    }

    companion object {
        const val MAX_LENGTH_ORGANISATION = 128
        const val MAX_LENGTH_LOCALITY = 64
        const val MAX_LENGTH_STATE = 64
        const val MAX_LENGTH_ORGANISATION_UNIT = 64
        const val MAX_LENGTH_COMMON_NAME = 64

        private val supportedAttributes = setOf(
            ObjectIdentifiers.O,
            ObjectIdentifiers.C,
            ObjectIdentifiers.L,
            ObjectIdentifiers.CN,
            ObjectIdentifiers.ST,
            ObjectIdentifiers.OU
        )

        private const val unspecifiedCountry = "ZZ"
        @Suppress("SpreadOperator")
        private val countryCodes: Set<String> = setOf(*Locale.getISOCountries(), unspecifiedCountry)

        @JvmStatic
        fun build(principal: X500Principal): MemberX500Name_NoUse {
            val x500Name = X500Name(principal.encoded)
            val CN = requireNotNull(x500Name.commonName) { "Corda X.500 names must include an CN attribute" }
            val OU = x500Name.organizationalUnit
            val O = requireNotNull(x500Name.organization) { "Corda X.500 names must include an O attribute" }
            val L = requireNotNull(x500Name.locality) { "Corda X.500 names must include an L attribute" }
            val ST = x500Name.state
            val C = requireNotNull(x500Name.country) { "Corda X.500 names must include an C attribute" }
            return MemberX500Name_NoUse(CN, OU, O, L, ST, C)
        }

        @JvmStatic
        fun parse(name: String): MemberX500Name_NoUse = build(X500Principal(name))
    }

    val encoded: ByteArray by lazy(LazyThreadSafetyMode.PUBLICATION) {
        DerOutputStream().use {
            it.putOrderedSetOf(DerValue.tag_Set, toOrderedAvas())
            it.flush()
            it.toByteArray()
        }
    }
    /** Return the [X500Principal] equivalent of this name. */
    val x500Principal: X500Principal by lazy(LazyThreadSafetyMode.PUBLICATION) {
        X500Principal(encoded)
    }

    override fun toString(): String = RDN(toOrderedAvas()).toString()

    /**
     * Return the underlying X.500 name from this Corda-safe X.500 name. These are guaranteed to have a consistent
     * ordering, such that their `toString()` function returns the same value every time for the same [CordaX500Name].
     */
    private fun toOrderedAvas(): Array<AVA> {
        val avas = mutableListOf(
            AVA(ObjectIdentifiers.C, DerValue(country))
        )
        state?.let { avas.add(AVA(ObjectIdentifiers.ST, DerValue(it))) }
        avas.add(AVA(ObjectIdentifiers.L, DerValue(locality)))
        avas.add(AVA(ObjectIdentifiers.O, DerValue(organisation)))
        organisationUnit?.let { avas.add(AVA(ObjectIdentifiers.OU, DerValue(it))) }
        commonName?.let { avas.add(AVA(ObjectIdentifiers.CN, DerValue(it))) }
        return avas.toTypedArray()
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as MemberX500Name_NoUse

        if (commonName != other.commonName) return false
        if (organisationUnit != other.organisationUnit) return false
        if (organisation != other.organisation) return false
        if (locality != other.locality) return false
        if (state != other.state) return false
        if (country != other.country) return false

        return true
    }

    override fun hashCode(): Int {
        var result = commonName?.hashCode() ?: 0
        result = 31 * result + (organisationUnit?.hashCode() ?: 0)
        result = 31 * result + organisation.hashCode()
        result = 31 * result + locality.hashCode()
        result = 31 * result + (state?.hashCode() ?: 0)
        result = 31 * result + country.hashCode()
        return result
    }
}
